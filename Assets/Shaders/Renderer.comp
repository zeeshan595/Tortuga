#version 460
#extension GL_GOOGLE_include_directive: enable
#define LOCAL_INVOCATION 8
layout(local_size_x = LOCAL_INVOCATION) in;
layout(local_size_y = LOCAL_INVOCATION) in;
layout(local_size_z = 1) in;

layout(set = 0, binding = 0) uniform RenderInfo {
  uint renderWidth;
  uint renderHeight;
};
layout(set = 0, binding = 1) buffer Render {
  vec4 pixels[];
};

layout(set = 1, binding = 0) readonly buffer MeshCounts {
  uint meshCounts[];  
};
layout(set = 1, binding = 1) readonly buffer MeshData {
  float meshData[];
};
struct IndexStruct {
  uint position;
  uint texture;
  uint normal;
};
layout(set = 1, binding = 2) readonly buffer MeshIndices {
  IndexStruct meshIndices[];
};
struct Face
{
  vec4 center;
  uint indices[3];
};
layout(set = 1, binding = 3) readonly buffer MeshFaces {
  Face meshFaces[];
};
struct Node {
  vec4 center;
  float radius;
  uint left;
  uint right;
  uint index;
  int isEnd;
};
layout(set = 1, binding = 4) readonly buffer MeshNodes {
  Node meshNodes[];
};

vec3 GetPosition(uint index)
{
  uint offset = 0 + (index * 3);
  return vec3(meshData[index + 0], meshData[index + 1], meshData[index + 2]);
}
vec2 GetTexture(uint index)
{
  uint offset = meshCounts[0] + (index * 2);
  return vec2(meshData[offset + 0], meshData[offset + 1]);
}
vec3 GetNormal(uint index)
{
  uint offset = meshCounts[0] + meshCounts[1] + (index * 3);
  return vec3(meshData[offset + 0], meshData[offset + 1], meshData[offset + 2]);
}

void main() {
  uint index = (gl_GlobalInvocationID.y * renderWidth) + gl_GlobalInvocationID.x;
  if (index >= renderWidth * renderHeight)
    return;

  pixels[index] = vec4(1.);
}