#version 460
#extension GL_GOOGLE_include_directive: enable
#define LOCAL_INVOCATION 8
layout(local_size_x = LOCAL_INVOCATION) in;
layout(local_size_y = LOCAL_INVOCATION) in;
layout(local_size_z = 1) in;

#define MAX_STEPS 100
#define MAX_DIST 100.
#define SURF_DIST .01

layout(set = 0, binding = 0) uniform RenderInfo {
  uint renderWidth;
  uint renderHeight;
};
layout(set = 0, binding = 1) buffer Render {
  vec4 pixels[];
};

layout(set = 1, binding = 0) readonly buffer MeshCounts {
  uint meshCounts[];  
};
layout(set = 1, binding = 1) readonly buffer MeshData {
  float meshData[];
};
struct IndexStruct {
  uint position;
  uint texture;
  uint normal;
};
layout(set = 1, binding = 2) readonly buffer MeshIndices {
  IndexStruct meshIndices[];
};
struct Face
{
  vec4 center;
  uint indices[3];
};
layout(set = 1, binding = 3) readonly buffer MeshFaces {
  Face meshFaces[];
};
struct Node {
  vec4 center;
  float radius;
  uint left;
  uint right;
  uint index;
  int isEnd;
};
layout(set = 1, binding = 4) readonly buffer MeshNodes {
  Node meshNodes[];
};

vec3 GetPosition(uint meshId, uint index)
{
  uint offset = 0 + (index * 3);
  for (uint i = 0; i < meshId * 5; i++)
    offset += meshCounts[i];
  return vec3(meshData[index + 0], meshData[index + 1], meshData[index + 2]);
}
vec2 GetTexture(uint meshId, uint index)
{
  uint offset = meshCounts[0] + (index * 2);
  for (uint i = 0; i < meshId * 5; i++)
    offset += meshCounts[i];
  return vec2(meshData[offset + 0], meshData[offset + 1]);
}
vec3 GetNormal(uint meshId, uint index)
{
  uint offset = meshCounts[0] + meshCounts[1] + (index * 3);
  for (uint i = 0; i < meshId * 5; i++)
    offset += meshCounts[i];
  return vec3(meshData[offset + 0], meshData[offset + 1], meshData[offset + 2]);
}

float SphereDist(vec3 position, float radius, vec3 point) {
  return length(point - position) - radius;
}
float GetMinDistance(vec3 point) {
  float rtn = 1 / 0.;
  for (uint i = 0; i < 1; i++) {
    uint nodesLen = meshNodes.length() - 1;
    float dist = SphereDist(vec3(0.), 1., point);
    if (rtn > dist) {
      rtn = dist;
    }
  }
  return rtn;
}
float RayMarch(vec3 rayOrigin, vec3 rayDirection) {
  float rayTravelDist = 0.;
  for (int i = 0; i < MAX_STEPS; i++) {
    vec3 rayLocation = rayOrigin + (rayTravelDist * rayDirection);
    float dist = GetMinDistance(rayLocation);
    rayTravelDist += dist;
    if (dist < SURF_DIST || rayTravelDist > MAX_DIST)
      break;
  }
  return rayTravelDist;
}

void main() {
  uint index = (gl_GlobalInvocationID.y * renderWidth) + gl_GlobalInvocationID.x;
  if (index >= renderWidth * renderHeight)
    return;

  vec2 uv = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
  uv.x = uv.x / renderWidth - .5;
  uv.y = uv.y / renderHeight - .5;
  vec3 rayOrigin = vec3(0, 0, -3);
  vec3 rayDirection = normalize(vec3(uv, 1.));
  float dist = RayMarch(rayOrigin, rayDirection);
  vec3 col = vec3(dist / 3.);
  pixels[index] = vec4(col, 1.);
}